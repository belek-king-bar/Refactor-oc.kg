# Generated by Django 2.2 on 2019-05-16 13:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='OCUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('login', models.CharField(max_length=32, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('ip', models.TextField()),
                ('balans', models.DecimalField(decimal_places=2, default=1.0, max_digits=9)),
                ('user_group', models.SmallIntegerField(default=0)),
                ('view_activity', models.IntegerField(null=True)),
                ('play_activity', models.IntegerField(null=True)),
                ('register_date', models.DateTimeField(auto_now_add=True)),
                ('mode', models.IntegerField(default=1, null=True)),
                ('ipfw_rule', models.IntegerField(default=0, null=True)),
                ('enabled', models.SmallIntegerField(default=1, null=True)),
                ('preferences', models.TextField(default=None, null=True)),
                ('status', models.CharField(default=None, max_length=2048, null=True)),
                ('username', models.CharField(blank=True, max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Bestseller',
            fields=[
                ('category_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('movies', models.TextField()),
                ('rank', models.IntegerField()),
            ],
            options={
                'db_table': 'bestsellers',
            },
        ),
        migrations.CreateModel(
            name='Check',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=70)),
                ('date', models.DateField()),
            ],
            options={
                'db_table': 'check',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('country_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'countries',
                'db_table': 'countries',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('file_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('path', models.CharField(max_length=255)),
                ('is_dir', models.IntegerField()),
                ('size', models.FloatField()),
                ('md5_hash', models.CharField(max_length=32)),
                ('metainfo', models.TextField(blank=True, null=True)),
                ('translation', models.CharField(max_length=255)),
                ('quality', models.CharField(max_length=100)),
                ('frames', models.TextField(blank=True, null=True)),
                ('tth_hash', models.CharField(max_length=40)),
                ('tries', models.IntegerField()),
                ('active', models.IntegerField()),
                ('seconds', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'files',
            },
        ),
        migrations.CreateModel(
            name='FilesLost',
            fields=[
                ('file_id', models.IntegerField(primary_key=True, serialize=False)),
                ('path', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'files_lost',
            },
        ),
        migrations.CreateModel(
            name='Filesstat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fileid', models.PositiveIntegerField()),
                ('lastaccess', models.DateTimeField()),
            ],
            options={
                'db_table': 'files_stat',
            },
        ),
        migrations.CreateModel(
            name='FilesTask',
            fields=[
                ('file_task_id', models.AutoField(primary_key=True, serialize=False)),
                ('from_field', models.CharField(db_column='from', max_length=255)),
                ('to', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField()),
                ('tries', models.IntegerField()),
            ],
            options={
                'db_table': 'files_tasks',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genre_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'genres',
            },
        ),
        migrations.CreateModel(
            name='Incoming',
            fields=[
                ('incoming_id', models.AutoField(primary_key=True, serialize=False)),
                ('path', models.CharField(max_length=255, unique=True)),
                ('level', models.IntegerField()),
                ('is_dir', models.IntegerField()),
                ('size', models.FloatField(blank=True, null=True)),
                ('expanded', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('files', models.TextField(blank=True, null=True)),
                ('quality', models.TextField(blank=True, null=True)),
                ('translation', models.TextField(blank=True, null=True)),
                ('last_query', models.CharField(blank=True, max_length=255, null=True)),
                ('search_results', models.TextField(blank=True, null=True)),
                ('parsing_url', models.CharField(blank=True, max_length=255, null=True)),
                ('parsed_info', models.TextField(blank=True, null=True)),
                ('info', models.TextField(blank=True, null=True)),
                ('active', models.IntegerField()),
                ('hidden', models.IntegerField()),
                ('sort', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'incoming',
            },
        ),
        migrations.CreateModel(
            name='LanguagesProto',
            fields=[
                ('lang', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('combination', models.CharField(max_length=4)),
                ('freq', models.FloatField()),
            ],
            options={
                'db_table': 'languages_proto',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('pid', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(max_length=64)),
                ('status', models.IntegerField()),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('report', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logs',
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('movie_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('international_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('wishuser', models.CharField(blank=True, max_length=128, null=True)),
                ('year', models.CharField(max_length=18)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('translation', models.CharField(max_length=255)),
                ('quality', models.CharField(max_length=100)),
                ('mpaa', models.CharField(blank=True, max_length=255, null=True)),
                ('covers', models.TextField()),
                ('trailer', models.TextField(blank=True, null=True)),
                ('hidden', models.IntegerField()),
                ('hit', models.IntegerField()),
                ('type_of_movie', models.CharField(max_length=255)),
                ('created_by', models.IntegerField(blank=True, null=True)),
                ('present_by', models.CharField(max_length=255)),
                ('group', models.CharField(max_length=255)),
                ('rank', models.FloatField()),
                ('comments', models.ManyToManyField(related_name='movies', to='webapp.Comment')),
                ('countries', models.ManyToManyField(related_name='movies', to='webapp.Country')),
                ('files', models.ManyToManyField(related_name='movies', to='webapp.File')),
                ('genres', models.ManyToManyField(related_name='movies', to='webapp.Genre')),
            ],
            options={
                'db_table': 'movies',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('person_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('international_name', models.CharField(max_length=100)),
                ('info', models.TextField(blank=True, null=True)),
                ('photos', models.TextField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=100, null=True)),
                ('rank', models.FloatField()),
                ('updated_at', models.DateTimeField()),
                ('tries', models.IntegerField()),
            ],
            options={
                'db_table': 'persones',
            },
        ),
        migrations.CreateModel(
            name='Registry',
            fields=[
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'registry',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('name_hyphenated', models.CharField(blank=True, max_length=100, null=True)),
                ('sort', models.IntegerField()),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='SearchTrigram',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('trigram', models.CharField(max_length=3)),
                ('type', models.CharField(max_length=6)),
            ],
            options={
                'db_table': 'search_trigrams',
            },
        ),
        migrations.CreateModel(
            name='Suggestion',
            fields=[
                ('suggestion_id', models.AutoField(primary_key=True, serialize=False)),
                ('word', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=6)),
            ],
            options={
                'db_table': 'suggestions',
            },
        ),
        migrations.CreateModel(
            name='SuggestionCache',
            fields=[
                ('query', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('result', models.TextField()),
            ],
            options={
                'db_table': 'suggestion_cache',
            },
        ),
        migrations.CreateModel(
            name='CommentsRating',
            fields=[
                ('comment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='comments_ratings', serialize=False, to='webapp.Comment')),
                ('vote', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'comments_rating',
            },
        ),
        migrations.CreateModel(
            name='Selection',
            fields=[
                ('selection_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('image', models.CharField(blank=True, max_length=128, null=True)),
                ('genres', models.ManyToManyField(related_name='selections', to='webapp.Genre')),
            ],
            options={
                'db_table': 'selections',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('system', models.CharField(max_length=9)),
                ('system_uid', models.IntegerField(blank=True, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
                ('details', models.CharField(blank=True, max_length=255, null=True)),
                ('updated_at', models.DateTimeField()),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='webapp.Movie')),
            ],
            options={
                'db_table': 'ratings',
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('participant_id', models.AutoField(primary_key=True, serialize=False)),
                ('character', models.CharField(blank=True, max_length=100, null=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='webapp.Movie')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='webapp.Person')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='webapp.Role')),
            ],
            options={
                'db_table': 'participants',
            },
        ),
        migrations.CreateModel(
            name='MovieUserRating',
            fields=[
                ('movie_user_rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.SmallIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to='webapp.Movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'movies_users_ratings',
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='selections',
            field=models.ManyToManyField(related_name='movies', to='webapp.Selection'),
        ),
        migrations.CreateModel(
            name='Hit',
            fields=[
                ('hit_id', models.AutoField(primary_key=True, serialize=False)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hits', to='webapp.Movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'hits',
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='to_user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                       related_name='comment', to='webapp.OCUser'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='comments',
                                    to='webapp.OCUser'),
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('bookmark_id', models.AutoField(primary_key=True, serialize=False)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='webapp.Movie')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='bookmarks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bookmarks',
            },
        ),
        migrations.CreateModel(
            name='CommentsVote',
            fields=[
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='comments_votes', serialize=False, to='webapp.Comment')),
                ('votes', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='comments_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments_votes',
            },
        ),
    ]
